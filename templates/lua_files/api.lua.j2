local guard = require "resty.guardjwt"
local validators = require "resty.jwt-validators"

local jwt,err = guard.GuardJWT.raw_verify_and_map(
    ngx,
    {
{% if item.verifications is defined %}
{% for payload in item.verifications %}
        {{ payload.indicatior }} = {
            validators = validators.equals_any_of({ "{{ payload.validator | join('", "') }}" }),
{% if payload.header is defined %}
            header = "{{ payload.header }}"
{% endif %}
        },
{% endfor %}
{% endif %}
{% if item.exp_validation is defined and item.exp_validation %}
        exp = {
            validators = validators.is_not_expired(),
        },
{% endif %}
{% if item.iat_validation is defined and item.iat_validation %}
        iat = {
            validators = validators.is_not_before(),
        }
{% endif %}

    },
    {
        secret = "{{ item.secret }}",
        is_token_mandatory = {{ item.is_token_mandatory | default('true') }},
        clear_authorization_header = {{ item.clear_authorization_header | default('true') }},
        authorization_header = "{{ item.authorization_header | default('authorization') }}"
    }
)

{% if item.url_validation is defined %}
local uri_request = ngx.var.uri
local allowed = false

if jwt then
    for _, pattern in ipairs(jwt.url) do
        if ngx.re.match(uri_request, pattern) then
            allowed = true
            break
        end
    end
    
end

if not allowed then
    ngx.log(ngx.ERR, "[API GW] URL Forbidden")
    return ngx.exit(ngx.HTTP_FORBIDDEN)
end
{% endif %}